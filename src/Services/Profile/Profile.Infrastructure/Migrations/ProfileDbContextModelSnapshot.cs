// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Profile.Infrastructure.Contexts;

#nullable disable

namespace Profile.Infrastructure.Migrations
{
    [DbContext(typeof(ProfileDbContext))]
    partial class ProfileDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InterestUserProfile", b =>
                {
                    b.Property<int>("InterestsId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfilesId")
                        .HasColumnType("text");

                    b.HasKey("InterestsId", "ProfilesId");

                    b.HasIndex("ProfilesId");

                    b.ToTable("InterestUserProfile");
                });

            modelBuilder.Entity("LanguageUserProfile", b =>
                {
                    b.Property<int>("LanguagesId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfilesId")
                        .HasColumnType("text");

                    b.HasKey("LanguagesId", "ProfilesId");

                    b.HasIndex("ProfilesId");

                    b.ToTable("LanguageUserProfile");
                });

            modelBuilder.Entity("Profile.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Москва"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Санкт-Петербург"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Новосибирск"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Лондон"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Name = "Манчестер"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            Name = "Бирмингем"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            Name = "Нью-Йорк"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 3,
                            Name = "Лос-Анджелес"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 3,
                            Name = "Чикаго"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 4,
                            Name = "Торонто"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 4,
                            Name = "Ванкувер"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 4,
                            Name = "Монреаль"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 5,
                            Name = "Варшава"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 5,
                            Name = "Краков"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 5,
                            Name = "Вроцлав"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 6,
                            Name = "Париж"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 6,
                            Name = "Марсель"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 6,
                            Name = "Лион"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 7,
                            Name = "Берлин"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 7,
                            Name = "Гамбург"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 7,
                            Name = "Мюнхен"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 8,
                            Name = "Минск"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 8,
                            Name = "Гомель"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 8,
                            Name = "Могилёв"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 9,
                            Name = "Мадрид"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 9,
                            Name = "Барселона"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 9,
                            Name = "Валенсия"
                        });
                });

            modelBuilder.Entity("Profile.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Россия"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Великобритания"
                        },
                        new
                        {
                            Id = 3,
                            Name = "США"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Канада"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Польша"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Франция"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Германия"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Беларусь"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Испания"
                        });
                });

            modelBuilder.Entity("Profile.Domain.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Среднее"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Среднее специальное"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Высшее"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Незаконченное высшее"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Второе высшее"
                        });
                });

            modelBuilder.Entity("Profile.Domain.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Дружба"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Общение"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Отношения"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Семья"
                        });
                });

            modelBuilder.Entity("Profile.Domain.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Profile.Domain.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Музыка"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Спорт"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Хип-хоп"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Искусство"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Мода"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Машины"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Еда"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Языки"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Наука"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Программирование"
                        });
                });

            modelBuilder.Entity("Profile.Domain.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Русский"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Английский"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Польский"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Французский"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Немецкий"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Белорусский"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Испанский"
                        });
                });

            modelBuilder.Entity("Profile.Domain.Models.ProfileEducation", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("text");

                    b.Property<int>("EducationId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProfileId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("ProfileEducation");
                });

            modelBuilder.Entity("Profile.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Profile.Domain.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AgeFrom")
                        .HasColumnType("integer");

                    b.Property<int>("AgeTo")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int?>("GoalId")
                        .HasColumnType("integer");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("MaxDistance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PreferredGender")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowAge")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GoalId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("InterestUserProfile", b =>
                {
                    b.HasOne("Profile.Domain.Models.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile.Domain.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageUserProfile", b =>
                {
                    b.HasOne("Profile.Domain.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile.Domain.Models.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Profile.Domain.Models.City", b =>
                {
                    b.HasOne("Profile.Domain.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Profile.Domain.Models.Image", b =>
                {
                    b.HasOne("Profile.Domain.Models.UserProfile", "Profile")
                        .WithMany("Images")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Profile.Domain.Models.ProfileEducation", b =>
                {
                    b.HasOne("Profile.Domain.Models.Education", "Education")
                        .WithMany("ProfileEducations")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile.Domain.Models.UserProfile", "Profile")
                        .WithMany("ProfileEducations")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Profile.Domain.Models.UserProfile", b =>
                {
                    b.HasOne("Profile.Domain.Models.City", "City")
                        .WithMany("Profiles")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile.Domain.Models.Goal", "Goal")
                        .WithMany("Profiles")
                        .HasForeignKey("GoalId");

                    b.HasOne("Profile.Domain.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Profile.Domain.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Profile.Domain.Models.City", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Profile.Domain.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Profile.Domain.Models.Education", b =>
                {
                    b.Navigation("ProfileEducations");
                });

            modelBuilder.Entity("Profile.Domain.Models.Goal", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Profile.Domain.Models.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Profile.Domain.Models.UserProfile", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProfileEducations");
                });
#pragma warning restore 612, 618
        }
    }
}
